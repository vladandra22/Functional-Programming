#lang racket

(require "etapa2.rkt")
(require "etapa3.rkt")

(provide (all-defined-out))

;; Preferințele bărbaților și femeilor din problemă se pot schimba
;; în timp, dar de obicei ele nu se schimbă radical de la un moment
;; la altul. De aceea, în loc să rulăm de la zero algoritmul
;; Gale-Shapley de fiecare dată când se schimbă ceva, preferăm să
;; pornim de la lista de logodne stabile obținută în pasul anterior
;; și să o actualizăm, conform algoritmului următor:
;; - eliminăm din engagements cuplurile care au devenit instabile
;;   în urma modificărilor de preferințe
;;   - cuplurile rămase sunt stabile între ele și considerăm că
;;     se găsesc împreună într-o cameră, în timp ce membrii cuplurilor
;;     destrămate stau la coadă la intrarea în cameră
;; - cât timp coada nu este goală
;;   - prima persoană p din coadă intră în cameră și încearcă să se
;;     cupleze cu cineva care este deja acolo, astfel:
;;     - p-list = lista de preferințe a lui p
;;     - determină prima persoană p' din p-list care este în cameră
;;     - dacă p' nu e logodită, logodește p' cu p
;;     - dacă p' e logodită
;;       - dacă p' îl preferă pe p partenerului actual p''
;;         - logodește p' cu p
;;         - încearcă să îl cuplezi pe p'' cu altcineva din cameră
;;           (folosind același algoritm)
;;       - altfel, treci la următoarea persoană din p-list (dacă
;;         aceasta există, altfel p rămâne temporar fără partener)


; TODO 1
; Implementați funcția match care primește o persoană person care
; intră în cameră, lista engagements a cuplurilor din cameră
; (cuplurile având pe prima poziție persoanele de gen opus lui 
; person), o listă pref1 care conține preferințele celor de același 
; gen cu person, o listă pref2 cu preferințele celor de gen diferit, 
; respectiv o coadă queue a persoanelor din afara camerei,
; și întoarce lista de cupluri actualizată astfel încât noile
; cupluri să fie stabile între ele.
; Această listă se obține ca rezultat al încercării de a cupla pe
; person cu cineva din cameră (person va încerca în ordine persoanele 
; din lista sa de preferințe), care poate duce la destrămarea
; unui cuplu și necesitatea de a cupla noua persoană rămasă singură
; cu altcineva din cameră, etc. Procesul continuă până când:
; - ori avem numai cupluri stabile între ele în cameră, nimeni
;   nefiind singur
; - ori toate persoanele rămase singure nu ar fi preferate de nimeni
;   altcineva din cameră, și în acest caz convenim să "logodim"
;   aceste persoane cu valoarea #f, astfel încât funcția să
;   întoarcă în aceeași listă atât informația despre cine din
;   cameră este logodit, cât și despre cine este singur

(define (match person engagements pref1 pref2 queue)
    (cond
      ; daca nu mai sunt persoane fara partener, returnam lista curenta de engagement-uri
      ((equal? person #f) engagements)
      ; încercăm să îi găsim un partener lui person
      (else
       (let verify-partner
         ((pref-list (get-pref-list pref1 person)))
           ;daca nu mai sunt preferinte ramase, ii adaugam ca fiind singuri pe lista de engagements
          (if (null? pref-list)
              (cons (cons #f person) engagements)
            ;altfel, cautam partener
              (letrec ((current-pref (car pref-list))
                       (partner-pref-list (get-pref-list pref2 current-pref))
                       (her-partner (get-partner engagements current-pref)))
               (cond
                  ; daca partenerul preferat nu e in aceeasi camera, trecem la urmatorul singur
                  ((member current-pref queue) (verify-partner (cdr pref-list)))
                  ;daca partenerul preferat e singur, modificam engagements.
                  ((not (get-partner engagements current-pref)) (update-engagements engagements current-pref person))
                  ;actualizam engagements-urile si cautam un match pentru partenerul trecut, care acum devine singur
                  ((preferable? partner-pref-list person her-partner) (match her-partner (update-engagements engagements current-pref person) pref1 pref2 queue))
                  ;daca nu se indeplinesc conditiile, trecem la urmatoarea preferinta
                  (else (verify-partner (cdr pref-list)))
                 )
               )
             )
       )
      )
  )
 )
                    
       

        


; TODO 2
; Implementați funcția path-to-stability care primește lista
; engagements a cuplurilor din cameră, o listă de preferințe 
; masculine mpref, o listă de preferințe feminine wpref, respectiv
; coada queue a persoanelor din afara camerei, și întoarce lista
; completă de logodne stabile, obținută după ce fiecare persoană
; din queue este introdusă pe rând în cameră și supusă procesului
; descris de funcția match.
; Precizări (aspecte care se garantează, nu trebuie verificate):
; - fiecare cuplu din lista engagements are pe prima poziție
;   o femeie
; - persoanele nelogodite din cameră apar în engagements sub forma
;   (#f . nume-bărbat) sau (nume-femeie . #f)

;functie implementata si in etapa2
(define (reverse-pairs-2 L)
  (map (lambda (x) (cons (cdr x) (car x))) L)
  )

; functie care returneaza daca persoana este femeie sau barbat
(define (get-gender x mpref wpref)
  (cond
    ((member x (get-men mpref)) 'man)
    ((member x (get-women wpref)) 'woman)
    (else 'undefined)
   )
  )
      
(define (path-to-stability engagements mpref wpref queue)
  ; daca am cuplat toate persoanele, returnam lista de engagements
  (if (null? queue)
      engagements
      (letrec ((p (car queue))
            (gender (get-gender p mpref wpref)))
        (if (eq? gender 'man)
            ;reapelez recursiv functia care face match-urile pentru urmatoarele persoane singure.
          (path-to-stability (match p engagements mpref wpref (cdr queue)) mpref wpref (cdr queue))
          (if (eq? gender 'woman)
              ; acelasi proces, insa reverse-uiesc perechile atat atunci cand le trimit pentru match, cat si pentru a continua ordinea
              ; fireasca a engagements-urilor pentru urmatoarele apeluri recursive (daca nu am avea o ordine stabila, s-ar mixa engagements-urilre)
              (path-to-stability (reverse-pairs-2 (match p (reverse-pairs-2 engagements) wpref mpref (cdr queue))) mpref wpref (cdr queue))
              '()
              )
          )
        )
      )
  )
                             



; TODO 3
; Implementați funcția update-stable-match care primește o listă 
; completă de logodne engagements (soluția anterioară), o listă de 
; preferințe masculine mpref și o listă de preferințe feminine wpref 
; (adică preferințele modificate față de cele pe baza cărora s-a 
; obținut soluția engagements), și calculează o nouă listă de logodne 
; stabile - conform cu noile preferințe, astfel:
; - unstable = cuplurile instabile din engagements
; - room-engagements = engagements - unstable
; - queue = persoanele din unstable
; - aplică algoritmul path-to-stability
; Precizări (aspecte care se garantează, nu trebuie verificate):
; - fiecare cuplu din lista engagements are pe prima poziție
;   o femeie
(define (update-stable-match engagements mpref wpref)
  (letrec ((unstable (get-unstable-couples engagements mpref wpref))
           ;remove* = elimina elementele listei1 din lista2
           (room-engagements (remove* unstable engagements))
           ;returneaza lista cu toti membrii (barbati si femei) din unstable
           (queue (get-couple-members unstable)))
    ;aplicam algoritmul path-to-stability
    (path-to-stability room-engagements mpref wpref queue)
    )
  )
            
           
                             
           


; TODO 4
; Implementați funcția build-stable-matches-stream care primește
; un flux pref-stream de instanțe SMP și întoarce fluxul de 
; soluții SMP corespunzător acestor instanțe.
; O instanță SMP este o pereche cu punct între o listă de preferințe
; masculine și o listă de preferințe feminine.
; Fluxul rezultat se va obține în felul următor:
; - primul element se calculează prin aplicarea algoritmului
;   Gale-Shapley asupra primei instanțe
; - următoarele elemente se obțin prin actualizarea soluției
;   anterioare conform algoritmului implementat în etapa 4 a temei
; Trebuie să lucrați cu interfața pentru fluxuri. Dacă rezolvați
; problema folosind liste și doar convertiți în/din fluxuri,
; punctajul pe acest exercițiu se anulează în totalitate.


(define (build-stable-matches-stream pref-stream)
  ;daca nu mai avem instante SMP, algoritmul se incheie
  (if (stream-empty? pref-stream)
      empty-stream
      (letrec ((instance (stream-first pref-stream))
            (mpref (car instance))
            (wpref (cdr instance))
            ; consturim recursiv solutiile in engagements
            (engagements (build-stable-matches-stream (stream-rest pref-stream))))
        (if (stream-empty? (stream-rest pref-stream)) ;primul element
            (stream-cons (gale-shapley mpref wpref) engagements)
            ; apelam update-stable-match pentru a avea o noua lista de logodne stabile, conforma cu noile solutii
            (stream-cons (update-stable-match (stream-first engagements) mpref wpref) engagements)
            )
        )
  )
  )
        
               
               
                     



